[
  {
    "line": 1,
    "elements": [
      {
        "start_timestamp": "2020-08-09T22:06:26.817Z",
        "before": [
          {
            "result": {
              "error_message": "java.lang.NoClassDefFoundError: Could not initialize class org.codehaus.groovy.reflection.ReflectionCache\r\n\tat org.codehaus.groovy.runtime.dgmimpl.NumberNumberMetaMethod.\u003cclinit\u003e(NumberNumberMetaMethod.java:33)\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:500)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:481)\r\n\tat org.codehaus.groovy.runtime.metaclass.MetaClassRegistryImpl.createMetaMethodFromClass(MetaClassRegistryImpl.java:258)\r\n\tat org.codehaus.groovy.runtime.metaclass.MetaClassRegistryImpl.\u003cinit\u003e(MetaClassRegistryImpl.java:111)\r\n\tat org.codehaus.groovy.runtime.metaclass.MetaClassRegistryImpl.\u003cinit\u003e(MetaClassRegistryImpl.java:86)\r\n\tat groovy.lang.GroovySystem.\u003cclinit\u003e(GroovySystem.java:36)\r\n\tat org.codehaus.groovy.runtime.InvokerHelper.\u003cclinit\u003e(InvokerHelper.java:86)\r\n\tat org.codehaus.groovy.runtime.ScriptBytecodeAdapter.createMap(ScriptBytecodeAdapter.java:635)\r\n\tat io.restassured.internal.ResponseParserRegistrar.\u003cinit\u003e(ResponseParserRegistrar.groovy)\r\n\tat io.restassured.RestAssured.\u003cclinit\u003e(RestAssured.java:347)\r\n\tat stepDefinitions.Hooks.setUp(Hooks.java:12)\r\n",
              "duration": 190135400,
              "status": "failed"
            },
            "match": {
              "location": "stepDefinitions.Hooks.setUp()"
            }
          }
        ],
        "line": 6,
        "name": "Verifying email formats from each comments of user posts",
        "description": "",
        "id": "verify-email-formats-from-comments-of-each-user-posts;verifying-email-formats-from-each-comments-of-user-posts",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 4001200,
              "status": "skipped"
            },
            "line": 7,
            "name": "I send a GET request for list of users",
            "match": {
              "location": "stepDefinitions.Users.iSendAGETRequestForListOfUsers()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 9006700,
              "status": "skipped"
            },
            "line": 8,
            "name": "I search user as \"Delphine\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Delphine\"",
                  "offset": 17
                }
              ],
              "location": "stepDefinitions.Users.iSearchUserAs(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1001000,
              "status": "skipped"
            },
            "line": 9,
            "name": "The response status should be 200 OK",
            "match": {
              "location": "stepDefinitions.Users.theResponseStatusShouldBeOK()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4002900,
              "status": "skipped"
            },
            "line": 10,
            "name": "The response should contain below details",
            "match": {
              "location": "stepDefinitions.Users.theResponseShouldContainBelowDetails(java.util.Map\u003cjava.lang.String, java.lang.String\u003e)"
            },
            "rows": [
              {
                "cells": [
                  "id",
                  "9"
                ]
              },
              {
                "cells": [
                  "name",
                  "Glenna Reichert"
                ]
              },
              {
                "cells": [
                  "username",
                  "Delphine"
                ]
              },
              {
                "cells": [
                  "email",
                  "Chaim_McDermott@dana.io"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 999900,
              "status": "skipped"
            },
            "line": 15,
            "name": "I send a GET request for user posts",
            "match": {
              "location": "stepDefinitions.UsersPosts.iSearchForPostsFromUser()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1002600,
              "status": "skipped"
            },
            "line": 16,
            "name": "The response status should be 200 OK",
            "match": {
              "location": "stepDefinitions.Users.theResponseStatusShouldBeOK()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1000400,
              "status": "skipped"
            },
            "line": 17,
            "name": "The response should fetch all the posts from the user",
            "match": {
              "location": "stepDefinitions.UsersPosts.theResponseShouldHaveBelowFields()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1000400,
              "status": "skipped"
            },
            "line": 18,
            "name": "I send GET request from each post to verify email formats",
            "match": {
              "location": "stepDefinitions.UsersComments.iFetchCommentsFromEachPostToVerifyEmailFormats()"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@requirements"
          }
        ]
      },
      {
        "start_timestamp": "2020-08-09T22:06:27.228Z",
        "before": [
          {
            "result": {
              "error_message": "java.lang.NoClassDefFoundError: Could not initialize class io.restassured.RestAssured\r\n\tat stepDefinitions.Hooks.setUp(Hooks.java:12)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "stepDefinitions.Hooks.setUp()"
            }
          }
        ],
        "line": 21,
        "name": "Send PUT request and verify response",
        "description": "",
        "id": "verify-email-formats-from-comments-of-each-user-posts;send-put-request-and-verify-response",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2003100,
              "status": "skipped"
            },
            "line": 22,
            "name": "I send a PUT request for \"valid\" user post \"81\"",
            "match": {
              "arguments": [
                {
                  "val": "\"valid\"",
                  "offset": 25
                },
                {
                  "val": "\"81\"",
                  "offset": 43
                }
              ],
              "location": "stepDefinitions.UsersPosts.iSendAPUTRequestForPostId(java.lang.String,java.lang.String,java.util.Map\u003cjava.lang.String, java.lang.String\u003e)"
            },
            "rows": [
              {
                "cells": [
                  "userId",
                  "9"
                ]
              },
              {
                "cells": [
                  "id",
                  "81"
                ]
              },
              {
                "cells": [
                  "title",
                  "API Automation Title"
                ]
              },
              {
                "cells": [
                  "body",
                  "API Automation Body"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 999900,
              "status": "skipped"
            },
            "line": 27,
            "name": "The response status should be 200 OK",
            "match": {
              "location": "stepDefinitions.Users.theResponseStatusShouldBeOK()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1000400,
              "status": "skipped"
            },
            "line": 28,
            "name": "The response of posts values should be updated",
            "match": {
              "location": "stepDefinitions.UsersPosts.theResponseOfPostsValuesShouldBeUpdated(java.util.Map\u003cjava.lang.String, java.lang.String\u003e)"
            },
            "rows": [
              {
                "cells": [
                  "userId",
                  "9"
                ]
              },
              {
                "cells": [
                  "id",
                  "81"
                ]
              },
              {
                "cells": [
                  "title",
                  "API Automation Title"
                ]
              },
              {
                "cells": [
                  "body",
                  "API Automation Body"
                ]
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@PUT"
          }
        ]
      },
      {
        "start_timestamp": "2020-08-09T22:06:27.270Z",
        "before": [
          {
            "result": {
              "error_message": "java.lang.NoClassDefFoundError: Could not initialize class io.restassured.RestAssured\r\n\tat stepDefinitions.Hooks.setUp(Hooks.java:12)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "stepDefinitions.Hooks.setUp()"
            }
          }
        ],
        "line": 35,
        "name": "Send POST request and verify response",
        "description": "",
        "id": "verify-email-formats-from-comments-of-each-user-posts;send-post-request-and-verify-response",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2001400,
              "status": "skipped"
            },
            "line": 36,
            "name": "I send a POST request for post \"113\"",
            "match": {
              "arguments": [
                {
                  "val": "\"113\"",
                  "offset": 31
                }
              ],
              "location": "stepDefinitions.UsersPosts.iSendAPOSTRequestForPost(java.lang.String,java.util.Map\u003cjava.lang.String, java.lang.String\u003e)"
            },
            "rows": [
              {
                "cells": [
                  "userId",
                  "8"
                ]
              },
              {
                "cells": [
                  "id",
                  "113"
                ]
              },
              {
                "cells": [
                  "title",
                  "API Automation Title Post"
                ]
              },
              {
                "cells": [
                  "body",
                  "API Automation Body Post"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1000500,
              "status": "skipped"
            },
            "line": 41,
            "name": "The response status should be 404 NOT_FOUND",
            "match": {
              "location": "stepDefinitions.Users.theResponseStatusShouldBeUnAuthorized()"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@Not_Found"
          }
        ]
      },
      {
        "start_timestamp": "2020-08-09T22:06:27.291Z",
        "before": [
          {
            "result": {
              "error_message": "java.lang.NoClassDefFoundError: Could not initialize class io.restassured.RestAssured\r\n\tat stepDefinitions.Hooks.setUp(Hooks.java:12)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "stepDefinitions.Hooks.setUp()"
            }
          }
        ],
        "line": 44,
        "name": "Send PUT request and verify response as Internal Server Error",
        "description": "",
        "id": "verify-email-formats-from-comments-of-each-user-posts;send-put-request-and-verify-response-as-internal-server-error",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2001500,
              "status": "skipped"
            },
            "line": 45,
            "name": "I send a PUT request for \"InValid\" user post \"110\"",
            "match": {
              "arguments": [
                {
                  "val": "\"InValid\"",
                  "offset": 25
                },
                {
                  "val": "\"110\"",
                  "offset": 45
                }
              ],
              "location": "stepDefinitions.UsersPosts.iSendAPUTRequestForPostId(java.lang.String,java.lang.String,java.util.Map\u003cjava.lang.String, java.lang.String\u003e)"
            },
            "rows": [
              {
                "cells": [
                  "userId",
                  "7"
                ]
              },
              {
                "cells": [
                  "id",
                  "110"
                ]
              },
              {
                "cells": [
                  "title",
                  "API Automation Title PUT"
                ]
              },
              {
                "cells": [
                  "body",
                  "API Automation Body PUT"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1001000,
              "status": "skipped"
            },
            "line": 50,
            "name": "The response status should be 500 INTERNAL SERVER ERROR",
            "match": {
              "location": "stepDefinitions.Users.theResponseStatusShouldBeInternalServerError()"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@INTERNAL"
          }
        ]
      }
    ],
    "name": "Verify Email formats from comments of each user posts",
    "description": "  Description : This test is to verify the APIs from User Blog on user , posts and comments before developing the UI\n                This test also helps in monitoring the health of the APIs",
    "id": "verify-email-formats-from-comments-of-each-user-posts",
    "keyword": "Feature",
    "uri": "file:src/resources/features/UserBlogs.feature",
    "tags": []
  }
]